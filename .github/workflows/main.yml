
name: CI-dev-pipeline
on:
  # Triggers the workflow on push or pull request events but only for the develop branch
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]
jobs:
  build-and-deploy:
  # build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          path: "secure-vote-system"

      - name: Build docker
        run: | 
          echo ---Building and starting up docker---
          docker-compose -f ./secure-vote-system/docker-compose.dev.yml up -d
          echo ---Containers up---

#   build:
#     # The type of runner that the job will run on
#     runs-on: ubuntu-latest
#     container:
#       image: lucasalt/act_base:latest
#     steps:
#       # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#       - uses: actions/checkout@v2
#         with:
#           path: "secure-vote-system"

#       - name: Build docker
#         run: | 
#           echo ---Building and starting up docker---
#           docker-compose -f ./secure-vote-system/docker-compose.dev.yml up -d
#           echo ---Containers up---

# #       - name: Run test
# #         run: |
# #           echo --- Running test cases ---
# #           docker-compose -f ./<REPO_NAME>/docker-compose.test-github.yml -p testing up --build --exit-code-from api-test
# #           echo --- Completed test cases ---

#       - name: Extract commit
#         shell: bash
#         run: |
#           echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV
  
#       - name: Get branch name (merge)
#         if: github.event_name != 'pull_request'
#         shell: bash
#         run: echo "BRANCH=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

#       - name: Get branch name (pull request)
#         if: github.event_name == 'pull_request'
#         shell: bash
#         run: echo "BRANCH=$(echo ${GITHUB_HEAD_REF} | tr / -)" >> $GITHUB_ENV

#       - name: Send slack notification
#         if: always()
#         uses: edge/simple-slack-notify@master    
#         env:
#           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
#         with:
#           channel: '#deployment'
#           status: ${{ job.status }}
#           success_text: '${env.GITHUB_WORKFLOW} #${env.GITHUB_RUN_NUMBER} build completed successfully'
#           failure_text: '${env.GITHUB_WORKFLOW} #${env.GITHUB_RUN_NUMBER} build failed'
#           cancelled_text: '${env.GITHUB_WORKFLOW} #${env.GITHUB_RUN_NUMBER} build was cancelled'
#           fields: |
#             [{ "title": "Repository", "value": "${env.GITHUB_REPOSITORY}", "short": true },
#             { "title": "Branch", "value": "${env.BRANCH}", "short": true },
#             { "title": "Commit", "value": "${env.GITHUB_SHA_SHORT}", "short": true },
#             { "title": "Action URL", "value": "${env.GITHUB_SERVER_URL}/${env.GITHUB_REPOSITORY}/actions/runs/${env.GITHUB_RUN_ID}"}]
